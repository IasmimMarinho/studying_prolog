%Q1 - concatenar listas%

concat([], L2, L2).
concat([X|R], L2, [X|W]) :- concat(R,L2,W).

%Q2 - concatenar inversa%

concat2(L1, L2, LR) :- concat(L2, L1, LR).


%Q3 - concatenar lista de listas%

concat3([], []).
concat3([L|LR], LRT) :- concat3(LR, R), concat(L, R, LRT).

%Q4 - mesclar elementos da lista%
mesclar([], L2, L2) :-!.
mesclar(L1, [], L1) :-!.
mesclar([X|XR], [Y|YR], [X,Y|W]) :- mesclar(XR, YR, W).

% mesclar uma lista de listas?

%Q5 - adcionar elementos ao final da lista%

addfinal(Z, [], [Z]).
addfinal(Z, [X|R], [X|W]) :- addfinal(Z,R,W).
-
addinicio(Z, [], [Z]).
addinicio(Z, [X|R], [Z,X|R]).

%Q6 - inverter uma lista%
inverte([], []).
inverte([X|R], LI) :- inverte(R, RI), addfinal(X, RI, LI) ,!.

%Q8 - Parear uma lista parear(E,L,LP)
parear(_, [], []) :- !.
parear(E, [X|R], [[E,X]|S]) :- parear(E, R, S) ,!.
--
%separa uma lista em sublistas
separa([], []).
separa([X|Resto], [[X]|Subarrays]) :- separa(Resto, Subarrays).

%---------------Revisão avaliação
%--RECEBE UM NUMERO E CRIA UMA LISTA EM ORDEM DECRESCENTE

liste(1, [1]). %caso base
liste(N, [N|X]) :- N > 1, M is N-1, liste(M, X) ,!.

%--RECEBE UM NUMERO E CRIA UMA LISTA EM ORDEM CRESCENTE
liste(N, L) :-
    N > 0,
    liste_helper(1, N, L).

liste_helper(N, N, [N]).
liste_helper(Start, End, [Start|T]) :-
    Start < End,
    Next is Start + 1,
    liste_helper(Next, End, T).

%--Compara se dois conjuntos são iguais

iguais([],[]).
iguais([X|R], C) :- member(X,C), delete(C,X,CR), iguais(R, CR),!.

%decodifica lista

parList([1,E], [E]):-!.
parList([N,E], [E|R]):- N > 1, M is N-1, parList([M,E],R).

decodifica([],[]):-!.
decodifica([P|RL], L) :- parList(P,LI), decodifica(RL,LR), append(LI,LR,L),!.

% Em uma função recursiva de calda a ultima clausula chama ela mesma.
